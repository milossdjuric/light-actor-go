// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: messages.proto

package remote

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RemoteHandler_SendMessage_FullMethodName    = "/remote.RemoteHandler/SendMessage"
	RemoteHandler_ReceiveMessage_FullMethodName = "/remote.RemoteHandler/ReceiveMessage"
)

// RemoteHandlerClient is the client API for RemoteHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteHandlerClient interface {
	SendMessage(ctx context.Context, in *MessageWrapper, opts ...grpc.CallOption) (*Empty, error)
	ReceiveMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (RemoteHandler_ReceiveMessageClient, error)
}

type remoteHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteHandlerClient(cc grpc.ClientConnInterface) RemoteHandlerClient {
	return &remoteHandlerClient{cc}
}

func (c *remoteHandlerClient) SendMessage(ctx context.Context, in *MessageWrapper, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, RemoteHandler_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteHandlerClient) ReceiveMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (RemoteHandler_ReceiveMessageClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RemoteHandler_ServiceDesc.Streams[0], RemoteHandler_ReceiveMessage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &remoteHandlerReceiveMessageClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RemoteHandler_ReceiveMessageClient interface {
	Recv() (*MessageWrapper, error)
	grpc.ClientStream
}

type remoteHandlerReceiveMessageClient struct {
	grpc.ClientStream
}

func (x *remoteHandlerReceiveMessageClient) Recv() (*MessageWrapper, error) {
	m := new(MessageWrapper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RemoteHandlerServer is the server API for RemoteHandler service.
// All implementations must embed UnimplementedRemoteHandlerServer
// for forward compatibility
type RemoteHandlerServer interface {
	SendMessage(context.Context, *MessageWrapper) (*Empty, error)
	ReceiveMessage(*MessageRequest, RemoteHandler_ReceiveMessageServer) error
	mustEmbedUnimplementedRemoteHandlerServer()
}

// UnimplementedRemoteHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteHandlerServer struct {
}

func (UnimplementedRemoteHandlerServer) SendMessage(context.Context, *MessageWrapper) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedRemoteHandlerServer) ReceiveMessage(*MessageRequest, RemoteHandler_ReceiveMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveMessage not implemented")
}
func (UnimplementedRemoteHandlerServer) mustEmbedUnimplementedRemoteHandlerServer() {}

// UnsafeRemoteHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteHandlerServer will
// result in compilation errors.
type UnsafeRemoteHandlerServer interface {
	mustEmbedUnimplementedRemoteHandlerServer()
}

func RegisterRemoteHandlerServer(s grpc.ServiceRegistrar, srv RemoteHandlerServer) {
	s.RegisterService(&RemoteHandler_ServiceDesc, srv)
}

func _RemoteHandler_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteHandlerServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteHandler_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteHandlerServer).SendMessage(ctx, req.(*MessageWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteHandler_ReceiveMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RemoteHandlerServer).ReceiveMessage(m, &remoteHandlerReceiveMessageServer{ServerStream: stream})
}

type RemoteHandler_ReceiveMessageServer interface {
	Send(*MessageWrapper) error
	grpc.ServerStream
}

type remoteHandlerReceiveMessageServer struct {
	grpc.ServerStream
}

func (x *remoteHandlerReceiveMessageServer) Send(m *MessageWrapper) error {
	return x.ServerStream.SendMsg(m)
}

// RemoteHandler_ServiceDesc is the grpc.ServiceDesc for RemoteHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "remote.RemoteHandler",
	HandlerType: (*RemoteHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _RemoteHandler_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveMessage",
			Handler:       _RemoteHandler_ReceiveMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "messages.proto",
}
